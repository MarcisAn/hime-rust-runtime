trigger:
  branches:
    include:
    - 'master'
  tags:
    include:
    - 'v*'

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and test
  jobs:  
  - job: Build
    displayName: Build and test
    pool:
      name: Scaleway
    container: cenotelie/hime-build-env:latest
    steps:
    - script: ./build.sh
- stage: BuildPublishableArtifacts
  displayName: Build publishable artifacts
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  jobs:
  - job: linux
    pool:
      name: Scaleway
    container: cenotelie/hime-build-env-light:latest
    steps:
    - script: |
        cargo build --release --target x86_64-unknown-linux-musl --features vendored
      displayName: Build
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/x86_64-unknown-linux-musl/release'
        contents: |
          himecc
          hime_sdk_debugger
          hime_parseit
          hime_langserv
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        overWrite: true
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
        artifact: linux-musl
  - job: windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-host x86_64-pc-windows-msvc
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        cargo --version
      displayName: Install Rust
    - script: |
        cargo build --release --features vendored
      displayName: Build
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/release'
        contents: |
          himecc.exe
          hime_sdk_debugger.exe
          hime_parseit.exe
          hime_langserv.exe
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        overWrite: true
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
        artifact: windows
  - job: macos
    pool:
      vmImage: 'macOS-latest'
    steps:
    - script: |
        set -e
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        cargo --version
      displayName: Install Rust
    - script: |
        cargo build --release
      displayName: Build
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/release'
        contents: |
          himecc
          hime_sdk_debugger
          hime_parseit
          hime_langserv
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        overWrite: true
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
        artifact: macos
- stage: PublishArtifacts
  displayName: Publish artifacts
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  jobs:
  - job: Publish
    pool:
      name: Scaleway
    steps:
    - script: |
        mkdir target
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        path: $(Build.SourcesDirectory)/target
    - task: DownloadSecureFile@1
      name: s3config
      inputs:
        secureFile: 's3.json'
    - script: |
        source build-env.sh
        curl -o s3cli "https://cenotelie.s3.fr-par.scw.cloud/s3cli"
        chmod +x s3cli
        chmod +x target/linux-musl/himecc
        chmod +x target/linux-musl/hime_langserv
        ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read -f target/linux-musl/himecc         cenotelie hime/$LABEL/linux/himecc
        ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read -f target/linux-musl/hime_langserv  cenotelie hime/$LABEL/linux/hime_langserv
        ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read -f target/windows/himecc.exe        cenotelie hime/$LABEL/windows/himecc.exe
        ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read -f target/windows/hime_langserv.exe cenotelie hime/$LABEL/windows/hime_langserv.exe
        ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read -f target/macos/himecc              cenotelie hime/$LABEL/macos/himecc
        ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read -f target/macos/hime_langserv       cenotelie hime/$LABEL/macos/hime_langserv
        ./target/linux-musl/himecc --version        | ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read cenotelie hime/$LABEL/linux/himecc.version
        ./target/linux-musl/hime_langserv --version | ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read cenotelie hime/$LABEL/linux/hime_langserv.version
        ./target/linux-musl/himecc --version        | ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read cenotelie hime/$LABEL/windows/himecc.exe.version
        ./target/linux-musl/hime_langserv --version | ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read cenotelie hime/$LABEL/windows/hime_langserv.exe.version
        ./target/linux-musl/himecc --version        | ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read cenotelie hime/$LABEL/macos/himecc.version
        ./target/linux-musl/hime_langserv --version | ./s3cli -c $(s3config.secureFilePath) object upload --acl public-read cenotelie hime/$LABEL/macos/hime_langserv.version
